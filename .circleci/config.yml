version: 2
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y build-essential clang curl libclang-dev python python-yaml

      - restore_cache:
          key: cargo-cache-1
      - run:
          name: Add rustmt
          command: |
            rustup component add rustfmt-preview
      - run:
          name: Ensure source code is formatted
          command: |
            cargo fmt && git diff --quiet
      - run:
          name: Build & Test
          command: |
            cargo build --release
            cargo test --release --no-fail-fast
            cargo test --release --no-fail-fast -- --nocapture --ignored
      - save_cache:
          key: cargo-cache-1
          paths:
          - "~/.cargo"

  publish:
    working_directory: ~/project
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y build-essential clang crossbuild-essential-armhf curl libclang-dev musl-dev musl-tools python python-yaml
            rustup target add x86_64-unknown-linux-musl
            rustup target add armv7-unknown-linux-musleabihf
      - restore_cache:
          key: cargo-cache-1
      - run:
          name: Publish
          command: |
            version=$(git describe --tags | sed -E 's/^v//')

            # Update Cargo.toml version specification
            sed "s/^version = \"0.0.1\"$/version = \"$version\"/" Cargo.toml > Cargo.toml.new
            mv Cargo.toml.new Cargo.toml
            git add Cargo.toml
            git config --global user.email "tools@titanclass.com.au"
            git config --global user.name "Titan Class Tools"
            git commit -m "version $version"

            # Build and test (amd64, musl)
            cargo build --release --target=x86_64-unknown-linux-musl
            cargo test --release --target=x86_64-unknown-linux-musl --no-fail-fast
            cargo test --release --target=x86_64-unknown-linux-musl --no-fail-fast -- --nocapture --ignored

            # Build (armv7, musl)
            BINDGEN_EXTRA_CLANG_ARGS="-mfloat-abi=hard" \
            C_INCLUDE_PATH=/usr/arm-linux-gnueabihf/include \
            CC_armv7_unknown_linux_musleabihf=arm-linux-gnueabihf-gcc \
            AR_armv7_unknown_linux_musleabihf=arm-linux-gnueabihf-ar \
              cargo build --target armv7-unknown-linux-musleabihf --release

            # Publish to DockerHub
            export DOCKER_CLI_EXPERIMENTAL=enabled
            docker login -u "$DOCKER_USERNAME" --password-stdin <<< "$DOCKER_PASSWORD"

            docker build -f Dockerfile.amd64 -t "titanclass/jsaas:${version}-amd64" .
            docker build -f Dockerfile.arm -t "titanclass/jsaas:${version}-arm" .

            docker push "titanclass/jsaas:${version}-amd64"
            docker push "titanclass/jsaas:${version}-arm"

            docker manifest create "titanclass/jsaas:$version" \
              "titanclass/jsaas:${version}-amd64" \
              "titanclass/jsaas:${version}-arm"

            docker manifest annotate --arch amd64 "titanclass/jsaas:$version" "titanclass/jsaas:${version}-amd64"
            docker manifest annotate --arch arm "titanclass/jsaas:$version" "titanclass/jsaas:${version}-arm"

            docker manifest push "titanclass/jsaas:$version"

            # Publish to Crates.io
            cargo login <<< "$CRATES_API_KEY"
            cargo publish
      - save_cache:
          key: cargo-cache-1
          paths:
          - "~/.cargo"

workflows:
  version: 2

  build:
    jobs:
      - build

  publish:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
